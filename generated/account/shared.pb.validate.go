// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: account/shared.proto

package account

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	common "github.com/ngdangkietse/ndk-go-proto/generated/common"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = common.PCode(0)
)

// Validate checks the field values on PUser with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PUser) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PUser with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in PUserMultiError, or nil if none found.
func (m *PUser) ValidateAll() error {
	return m.validate(true)
}

func (m *PUser) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for FullName

	// no validation rules for Email

	if len(errors) > 0 {
		return PUserMultiError(errors)
	}

	return nil
}

// PUserMultiError is an error wrapping multiple validation errors returned by
// PUser.ValidateAll() if the designated constraints aren't met.
type PUserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PUserMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PUserMultiError) AllErrors() []error { return m }

// PUserValidationError is the validation error returned by PUser.Validate if
// the designated constraints aren't met.
type PUserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PUserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PUserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PUserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PUserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PUserValidationError) ErrorName() string { return "PUserValidationError" }

// Error satisfies the builtin error interface
func (e PUserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PUserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PUserValidationError{}

// Validate checks the field values on PUpsertUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PUpsertUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PUpsertUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PUpsertUserResponseMultiError, or nil if none found.
func (m *PUpsertUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PUpsertUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetErrors()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PUpsertUserResponseValidationError{
					field:  "Errors",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PUpsertUserResponseValidationError{
					field:  "Errors",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetErrors()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PUpsertUserResponseValidationError{
				field:  "Errors",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.Data != nil {
		// no validation rules for Data
	}

	if len(errors) > 0 {
		return PUpsertUserResponseMultiError(errors)
	}

	return nil
}

// PUpsertUserResponseMultiError is an error wrapping multiple validation
// errors returned by PUpsertUserResponse.ValidateAll() if the designated
// constraints aren't met.
type PUpsertUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PUpsertUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PUpsertUserResponseMultiError) AllErrors() []error { return m }

// PUpsertUserResponseValidationError is the validation error returned by
// PUpsertUserResponse.Validate if the designated constraints aren't met.
type PUpsertUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PUpsertUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PUpsertUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PUpsertUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PUpsertUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PUpsertUserResponseValidationError) ErrorName() string {
	return "PUpsertUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PUpsertUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPUpsertUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PUpsertUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PUpsertUserResponseValidationError{}

// Validate checks the field values on PGetUserResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PGetUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PGetUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PGetUserResponseMultiError, or nil if none found.
func (m *PGetUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PGetUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PGetUserResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PGetUserResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PGetUserResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetErrors()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PGetUserResponseValidationError{
					field:  "Errors",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PGetUserResponseValidationError{
					field:  "Errors",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetErrors()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PGetUserResponseValidationError{
				field:  "Errors",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PGetUserResponseMultiError(errors)
	}

	return nil
}

// PGetUserResponseMultiError is an error wrapping multiple validation errors
// returned by PGetUserResponse.ValidateAll() if the designated constraints
// aren't met.
type PGetUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PGetUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PGetUserResponseMultiError) AllErrors() []error { return m }

// PGetUserResponseValidationError is the validation error returned by
// PGetUserResponse.Validate if the designated constraints aren't met.
type PGetUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PGetUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PGetUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PGetUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PGetUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PGetUserResponseValidationError) ErrorName() string { return "PGetUserResponseValidationError" }

// Error satisfies the builtin error interface
func (e PGetUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPGetUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PGetUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PGetUserResponseValidationError{}
